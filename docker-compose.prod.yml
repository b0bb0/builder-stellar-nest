version: "3.8"

services:
  # Main Vulnerability Assessment Platform
  vulnerability-scanner:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: vuln-assessment-platform
    restart: unless-stopped
    ports:
      - "80:8080" # Web interface
      - "8081:8081" # WebSocket for real-time updates
    environment:
      - NODE_ENV=production
      - PORT=8080
      - WS_PORT=8081
      - DATABASE_URL=/app/data/production.db
      - NUCLEI_PATH=/usr/local/bin/nuclei
      - NUCLEI_TEMPLATES_PATH=/app/nuclei-templates
      - SUBFINDER_PATH=/usr/local/bin/subfinder
      - NMAP_PATH=/usr/bin/nmap
      - LOG_LEVEL=info
      - MAX_CONCURRENT_SCANS=5
      - NUCLEI_TIMEOUT=600
      - NUCLEI_RATE_LIMIT=150
      - AI_ENABLED=true
      - WS_ENABLED=true
    volumes:
      - vuln_data:/app/data
      - vuln_logs:/app/logs
      - vuln_reports:/app/reports
      - nuclei_templates:/app/nuclei-templates
    networks:
      - vuln_network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: vuln-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - vuln_network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Database Admin Interface (optional)
  db-admin:
    image: coleifer/sqlite-web
    container_name: vuln-db-admin
    restart: unless-stopped
    ports:
      - "8082:8080"
    volumes:
      - vuln_data:/data
    environment:
      - SQLITE_DATABASE=/data/production.db
    networks:
      - vuln_network
    depends_on:
      - vulnerability-scanner
    profiles:
      - admin

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: vuln-nginx
    restart: unless-stopped
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
      - ssl_certs:/etc/ssl/certs
    networks:
      - vuln_network
    depends_on:
      - vulnerability-scanner
    profiles:
      - proxy

  # Watchtower for automatic updates (optional)
  watchtower:
    image: containrrr/watchtower
    container_name: vuln-watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=3600
      - WATCHTOWER_INCLUDE_STOPPED=true
    profiles:
      - auto-update

volumes:
  vuln_data:
    driver: local
  vuln_logs:
    driver: local
  vuln_reports:
    driver: local
  nuclei_templates:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  ssl_certs:
    driver: local

networks:
  vuln_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
