import React, { useState, useEffect } from "react";
import { Vulnerability, SeverityLevel } from "@shared/api";
import { cn } from "@/lib/utils";
import {
  AlertTriangle,
  Shield,
  Globe,
  Lock,
  Database,
  Server,
  Code,
  Eye,
} from "lucide-react";

interface VulnerabilityNetworkProps {
  vulnerabilities: Vulnerability[];
  riskScore: number;
  className?: string;
}

interface NetworkNode {
  id: string;
  type: "center" | "vulnerability" | "category";
  x: number;
  y: number;
  size: number;
  severity?: SeverityLevel;
  label: string;
  value?: string | number;
  icon?: React.ReactNode;
  connections?: string[];
  vulnerability?: Vulnerability;
}

const severityColors = {
  critical: {
    bg: "rgba(239, 68, 68, 0.8)",
    border: "#ef4444",
    glow: "rgba(239, 68, 68, 0.3)",
  },
  high: {
    bg: "rgba(249, 115, 22, 0.8)",
    border: "#f97316",
    glow: "rgba(249, 115, 22, 0.3)",
  },
  medium: {
    bg: "rgba(234, 179, 8, 0.8)",
    border: "#eab308",
    glow: "rgba(234, 179, 8, 0.3)",
  },
  low: {
    bg: "rgba(59, 130, 246, 0.8)",
    border: "#3b82f6",
    glow: "rgba(59, 130, 246, 0.3)",
  },
  info: {
    bg: "rgba(107, 114, 128, 0.8)",
    border: "#6b7280",
    glow: "rgba(107, 114, 128, 0.3)",
  },
};

const categoryIcons = {
  "SQL Injection": <Database className="h-4 w-4" />,
  XSS: <Code className="h-4 w-4" />,
  Authentication: <Lock className="h-4 w-4" />,
  Network: <Globe className="h-4 w-4" />,
  Server: <Server className="h-4 w-4" />,
  Information: <Eye className="h-4 w-4" />,
};

export default function VulnerabilityNetwork({
  vulnerabilities,
  riskScore,
  className,
}: VulnerabilityNetworkProps) {
  const [hoveredNode, setHoveredNode] = useState<string | null>(null);
  const [animationProgress, setAnimationProgress] = useState(0);

  useEffect(() => {
    const timer = setInterval(() => {
      setAnimationProgress((prev) => (prev + 1) % 360);
    }, 50);
    return () => clearInterval(timer);
  }, []);

  // Group vulnerabilities by category/type
  const groupedVulns = vulnerabilities.reduce(
    (acc, vuln) => {
      const category = vuln.tags[0] || "Other";
      if (!acc[category]) acc[category] = [];
      acc[category].push(vuln);
      return acc;
    },
    {} as Record<string, Vulnerability[]>,
  );

  // Generate network nodes
  const generateNodes = (): NetworkNode[] => {
    const centerNode: NetworkNode = {
      id: "center",
      type: "center",
      x: 50,
      y: 50,
      size: 120,
      label: "Risk Score",
      value: `${riskScore}%`,
      icon: <Shield className="h-8 w-8" />,
      connections: [],
    };

    const categoryNodes: NetworkNode[] = Object.entries(groupedVulns).map(
      ([category, vulns], index) => {
        const angle = index * 60 + animationProgress * 0.5;
        const radius = 35;
        const x = 50 + radius * Math.cos((angle * Math.PI) / 180);
        const y = 50 + radius * Math.sin((angle * Math.PI) / 180);

        const severestVuln = vulns.reduce((prev, curr) => {
          const severityOrder = {
            critical: 4,
            high: 3,
            medium: 2,
            low: 1,
            info: 0,
          };
          return severityOrder[curr.severity] > severityOrder[prev.severity]
            ? curr
            : prev;
        });

        return {
          id: `category-${category}`,
          type: "category",
          x,
          y,
          size: 60 + vulns.length * 8,
          severity: severestVuln.severity,
          label: category,
          value: vulns.length,
          icon: categoryIcons[category as keyof typeof categoryIcons] || (
            <AlertTriangle className="h-4 w-4" />
          ),
          connections: ["center"],
        };
      },
    );

    // Add individual vulnerability nodes around categories
    const vulnNodes: NetworkNode[] = [];
    Object.entries(groupedVulns).forEach(([category, vulns], categoryIndex) => {
      const categoryNode = categoryNodes[categoryIndex];

      vulns.slice(0, 3).forEach((vuln, index) => {
        const angle =
          categoryIndex * 60 + (index - 1) * 25 + animationProgress * 0.3;
        const radius = 50;
        const x = 50 + radius * Math.cos((angle * Math.PI) / 180);
        const y = 50 + radius * Math.sin((angle * Math.PI) / 180);

        vulnNodes.push({
          id: `vuln-${vuln.id}`,
          type: "vulnerability",
          x,
          y,
          size: 40,
          severity: vuln.severity,
          label: vuln.title.substring(0, 20) + "...",
          value: vuln.cvss || "N/A",
          vulnerability: vuln,
          connections: [categoryNode.id],
        });
      });
    });

    centerNode.connections = categoryNodes.map((node) => node.id);
    return [centerNode, ...categoryNodes, ...vulnNodes];
  };

  const nodes = generateNodes();

  // Generate connections between nodes
  const generateConnections = () => {
    const connections: Array<{ from: NetworkNode; to: NetworkNode }> = [];

    nodes.forEach((node) => {
      node.connections?.forEach((connectionId) => {
        const targetNode = nodes.find((n) => n.id === connectionId);
        if (targetNode) {
          connections.push({ from: node, to: targetNode });
        }
      });
    });

    return connections;
  };

  const connections = generateConnections();

  const getRiskColor = (score: number) => {
    if (score >= 80)
      return {
        bg: "rgba(139, 92, 246, 0.9)",
        border: "#8b5cf6",
        glow: "rgba(139, 92, 246, 0.4)",
      };
    if (score >= 60)
      return {
        bg: "rgba(168, 85, 247, 0.9)",
        border: "#a855f7",
        glow: "rgba(168, 85, 247, 0.4)",
      };
    if (score >= 40)
      return {
        bg: "rgba(59, 130, 246, 0.9)",
        border: "#3b82f6",
        glow: "rgba(59, 130, 246, 0.4)",
      };
    return {
      bg: "rgba(34, 197, 94, 0.9)",
      border: "#22c55e",
      glow: "rgba(34, 197, 94, 0.4)",
    };
  };

  const centerColor = getRiskColor(riskScore);

  return (
    <div className={cn("relative w-full h-[600px] overflow-hidden", className)}>
      {/* Background Grid */}
      <div
        className="absolute inset-0 opacity-10"
        style={{
          backgroundImage: `
            linear-gradient(rgba(139, 92, 246, 0.1) 1px, transparent 1px),
            linear-gradient(90deg, rgba(139, 92, 246, 0.1) 1px, transparent 1px)
          `,
          backgroundSize: "50px 50px",
          transform: `rotate(${animationProgress * 0.1}deg)`,
        }}
      />

      <svg className="absolute inset-0 w-full h-full" viewBox="0 0 100 100">
        <defs>
          <filter id="glow">
            <feGaussianBlur stdDeviation="2" result="coloredBlur" />
            <feMerge>
              <feMergeNode in="coloredBlur" />
              <feMergeNode in="SourceGraphic" />
            </feMerge>
          </filter>

          <radialGradient id="centerGradient" cx="50%" cy="50%" r="50%">
            <stop offset="0%" stopColor={centerColor.bg} />
            <stop offset="100%" stopColor="rgba(0,0,0,0.8)" />
          </radialGradient>

          {Object.entries(severityColors).map(([severity, colors]) => (
            <radialGradient
              key={severity}
              id={`${severity}Gradient`}
              cx="50%"
              cy="50%"
              r="50%"
            >
              <stop offset="0%" stopColor={colors.bg} />
              <stop offset="100%" stopColor="rgba(0,0,0,0.6)" />
            </radialGradient>
          ))}
        </defs>

        {/* Connections */}
        {connections.map((connection, index) => (
          <line
            key={index}
            x1={connection.from.x}
            y1={connection.from.y}
            x2={connection.to.x}
            y2={connection.to.y}
            stroke="url(#connectionGradient)"
            strokeWidth="0.2"
            opacity={
              hoveredNode === connection.from.id ||
              hoveredNode === connection.to.id
                ? 0.8
                : 0.3
            }
            className="transition-opacity duration-300"
          >
            <animate
              attributeName="stroke-dashoffset"
              values="0;10"
              dur="2s"
              repeatCount="indefinite"
            />
          </line>
        ))}

        {/* Nodes */}
        {nodes.map((node) => {
          const isHovered = hoveredNode === node.id;
          const colors =
            node.type === "center"
              ? centerColor
              : node.severity
                ? severityColors[node.severity]
                : severityColors.info;

          return (
            <g key={node.id}>
              {/* Glow effect */}
              {isHovered && (
                <circle
                  cx={node.x}
                  cy={node.y}
                  r={node.size / 100 + 2}
                  fill={colors.glow}
                  filter="url(#glow)"
                  opacity="0.6"
                >
                  <animate
                    attributeName="r"
                    values={`${node.size / 100 + 2};${node.size / 100 + 4};${node.size / 100 + 2}`}
                    dur="2s"
                    repeatCount="indefinite"
                  />
                </circle>
              )}

              {/* Main circle */}
              <circle
                cx={node.x}
                cy={node.y}
                r={node.size / 100}
                fill={`url(#${node.severity || "center"}Gradient)`}
                stroke={colors.border}
                strokeWidth="0.3"
                className="cursor-pointer transition-all duration-300"
                onMouseEnter={() => setHoveredNode(node.id)}
                onMouseLeave={() => setHoveredNode(null)}
                style={{
                  filter: isHovered
                    ? `drop-shadow(0 0 10px ${colors.glow})`
                    : undefined,
                  transform: isHovered ? "scale(1.1)" : "scale(1)",
                  transformOrigin: `${node.x}% ${node.y}%`,
                }}
              />

              {/* Progress ring for center node */}
              {node.type === "center" && (
                <circle
                  cx={node.x}
                  cy={node.y}
                  r={node.size / 100 - 0.5}
                  fill="none"
                  stroke={centerColor.border}
                  strokeWidth="0.5"
                  strokeDasharray={`${(riskScore / 100) * 2 * Math.PI * (node.size / 100 - 0.5)} ${2 * Math.PI * (node.size / 100 - 0.5)}`}
                  strokeLinecap="round"
                  transform={`rotate(-90 ${node.x} ${node.y})`}
                  opacity="0.8"
                />
              )}
            </g>
          );
        })}
      </svg>

      {/* Node Labels */}
      {nodes.map((node) => {
        const isHovered = hoveredNode === node.id;

        return (
          <div
            key={`label-${node.id}`}
            className="absolute pointer-events-none transition-all duration-300"
            style={{
              left: `${node.x}%`,
              top: `${node.y}%`,
              transform: `translate(-50%, -50%) ${isHovered ? "scale(1.1)" : "scale(1)"}`,
              zIndex: isHovered ? 20 : 10,
            }}
          >
            <div className="text-center">
              {/* Icon */}
              <div className="flex justify-center mb-1 text-white opacity-90">
                {node.icon}
              </div>

              {/* Value */}
              <div className="text-white font-bold text-sm mb-1">
                {node.value}
              </div>

              {/* Label */}
              <div className="text-xs text-blue-200 font-medium">
                {node.label}
              </div>

              {/* Detailed info on hover */}
              {isHovered && node.vulnerability && (
                <div className="absolute top-full left-1/2 transform -translate-x-1/2 mt-2 bg-black/90 border border-purple-500/50 rounded-lg p-3 min-w-[200px] text-left backdrop-blur-sm">
                  <div className="text-sm font-semibold text-white mb-1">
                    {node.vulnerability.title}
                  </div>
                  <div className="text-xs text-gray-300 mb-2">
                    {node.vulnerability.description.substring(0, 100)}...
                  </div>
                  <div className="flex justify-between text-xs">
                    <span className="text-gray-400">CVSS:</span>
                    <span className="text-orange-400">
                      {node.vulnerability.cvss || "N/A"}
                    </span>
                  </div>
                  <div className="flex justify-between text-xs">
                    <span className="text-gray-400">Severity:</span>
                    <span
                      className={`capitalize text-${node.vulnerability.severity === "critical" ? "red" : node.vulnerability.severity === "high" ? "orange" : "yellow"}-400`}
                    >
                      {node.vulnerability.severity}
                    </span>
                  </div>
                </div>
              )}
            </div>
          </div>
        );
      })}

      {/* Legend */}
      <div className="absolute bottom-4 left-4 bg-black/80 border border-purple-500/30 rounded-lg p-4 backdrop-blur-sm">
        <div className="text-sm font-semibold text-white mb-3">
          Vulnerability Map
        </div>
        <div className="space-y-2">
          {Object.entries(severityColors).map(([severity, colors]) => (
            <div key={severity} className="flex items-center gap-2">
              <div
                className="w-3 h-3 rounded-full border"
                style={{
                  backgroundColor: colors.bg,
                  borderColor: colors.border,
                }}
              />
              <span className="text-xs text-gray-300 capitalize">
                {severity}
              </span>
            </div>
          ))}
        </div>
      </div>

      {/* Stats */}
      <div className="absolute top-4 right-4 bg-black/80 border border-purple-500/30 rounded-lg p-4 backdrop-blur-sm">
        <div className="text-sm font-semibold text-white mb-3">
          Network Stats
        </div>
        <div className="space-y-1 text-xs text-gray-300">
          <div>
            Total Vulnerabilities:{" "}
            <span className="text-purple-400">{vulnerabilities.length}</span>
          </div>
          <div>
            Categories:{" "}
            <span className="text-blue-400">
              {Object.keys(groupedVulns).length}
            </span>
          </div>
          <div>
            Risk Score:{" "}
            <span
              className={`${riskScore >= 80 ? "text-red-400" : riskScore >= 60 ? "text-orange-400" : "text-green-400"}`}
            >
              {riskScore}%
            </span>
          </div>
        </div>
      </div>
    </div>
  );
}
