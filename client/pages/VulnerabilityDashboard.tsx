import React, { useState, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import {
  Shield,
  AlertTriangle,
  CheckCircle2,
  TrendingUp,
  Zap,
  Users,
  Globe,
  Cpu,
  Bell,
  Settings,
  MoreVertical,
  ChevronRight,
  Activity,
  Lock,
  Unlock,
  Eye,
  Target,
  Layers,
} from "lucide-react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import VulnerabilityNetwork from "@/components/ui/vulnerability-network";

interface VulnerabilityStats {
  critical: number;
  high: number;
  medium: number;
  low: number;
  resolved: number;
}

interface AssetData {
  id: string;
  name: string;
  type: "web" | "mobile" | "api" | "database";
  riskScore: number;
  lastScan: string;
  status: "secure" | "warning" | "critical";
}

interface SecurityMetric {
  label: string;
  value: string | number;
  change: number;
  icon: React.ReactNode;
  color: string;
}

const VulnerabilityDashboard: React.FC = () => {
  const [activeTab, setActiveTab] = useState<
    "overview" | "assets" | "insights"
  >("overview");
  const [vulnerabilityStats, setVulnerabilityStats] =
    useState<VulnerabilityStats>({
      critical: 12,
      high: 24,
      medium: 48,
      low: 156,
      resolved: 892,
    });

  const [securityScore, setSecurityScore] = useState(0);
  const [targetScore] = useState(94);

  // Mock vulnerability data for the network
  const mockVulnerabilities = [
    {
      id: "1",
      title: "SQL Injection in Login Form",
      description:
        "Potential SQL injection vulnerability detected in user authentication endpoint",
      severity: "critical" as const,
      cvss: "9.8",
      tags: ["SQL Injection", "Authentication"],
      affected_url: "/api/login",
      solution: "Use parameterized queries",
    },
    {
      id: "2",
      title: "Cross-Site Scripting (XSS)",
      description: "Reflected XSS vulnerability in search functionality",
      severity: "high" as const,
      cvss: "7.4",
      tags: ["XSS", "Input Validation"],
      affected_url: "/search",
      solution: "Implement proper input sanitization",
    },
    {
      id: "3",
      title: "Insecure Direct Object Reference",
      description:
        "User can access other users' data by manipulating ID parameter",
      severity: "high" as const,
      cvss: "6.5",
      tags: ["Authentication", "Access Control"],
      affected_url: "/api/user/{id}",
      solution: "Implement proper authorization checks",
    },
    {
      id: "4",
      title: "Weak SSL/TLS Configuration",
      description: "Server accepts weak cipher suites and protocols",
      severity: "medium" as const,
      cvss: "5.3",
      tags: ["Network", "Encryption"],
      affected_url: "https://example.com",
      solution: "Update SSL/TLS configuration",
    },
    {
      id: "5",
      title: "Information Disclosure",
      description: "Server returns sensitive information in error messages",
      severity: "low" as const,
      cvss: "3.7",
      tags: ["Information", "Error Handling"],
      affected_url: "/api/error",
      solution: "Implement generic error messages",
    },
    {
      id: "6",
      title: "Missing Security Headers",
      description: "Critical security headers are not present",
      severity: "medium" as const,
      cvss: "4.3",
      tags: ["Network", "Headers"],
      affected_url: "https://example.com",
      solution: "Add security headers",
    },
  ];

  useEffect(() => {
    const timer = setTimeout(() => {
      setSecurityScore(targetScore);
    }, 500);
    return () => clearTimeout(timer);
  }, [targetScore]);

  const assets: AssetData[] = [
    {
      id: "1",
      name: "Main Website",
      type: "web",
      riskScore: 85,
      lastScan: "2h ago",
      status: "secure",
    },
    {
      id: "2",
      name: "Mobile App API",
      type: "api",
      riskScore: 62,
      lastScan: "4h ago",
      status: "warning",
    },
    {
      id: "3",
      name: "User Database",
      type: "database",
      riskScore: 31,
      lastScan: "1h ago",
      status: "critical",
    },
    {
      id: "4",
      name: "Payment Gateway",
      type: "api",
      riskScore: 89,
      lastScan: "6h ago",
      status: "secure",
    },
  ];

  const securityMetrics: SecurityMetric[] = [
    {
      label: "Threat Level",
      value: "Medium",
      change: -12,
      icon: <Shield className="w-4 h-4" />,
      color: "text-yellow-400",
    },
    {
      label: "Assets Monitored",
      value: "247",
      change: +8,
      icon: <Globe className="w-4 h-4" />,
      color: "text-blue-400",
    },
    {
      label: "Active Scans",
      value: "18",
      change: +3,
      icon: <Activity className="w-4 h-4" />,
      color: "text-green-400",
    },
    {
      label: "AI Insights",
      value: "156",
      change: +24,
      icon: <Cpu className="w-4 h-4" />,
      color: "text-purple-400",
    },
  ];

  const getStatusColor = (status: string) => {
    switch (status) {
      case "secure":
        return "text-green-400 bg-green-400/10";
      case "warning":
        return "text-yellow-400 bg-yellow-400/10";
      case "critical":
        return "text-red-400 bg-red-400/10";
      default:
        return "text-gray-400 bg-gray-400/10";
    }
  };

  const getAssetIcon = (type: string) => {
    switch (type) {
      case "web":
        return <Globe className="w-4 h-4" />;
      case "mobile":
        return <Zap className="w-4 h-4" />;
      case "api":
        return <Layers className="w-4 h-4" />;
      case "database":
        return <Cpu className="w-4 h-4" />;
      default:
        return <Globe className="w-4 h-4" />;
    }
  };

  const CircularProgress = ({
    value,
    size = 200,
    strokeWidth = 12,
  }: {
    value: number;
    size?: number;
    strokeWidth?: number;
  }) => {
    const radius = (size - strokeWidth) / 2;
    const circumference = radius * 2 * Math.PI;
    const offset = circumference - (value / 100) * circumference;

    return (
      <div className="relative" style={{ width: size, height: size }}>
        <svg className="transform -rotate-90" width={size} height={size}>
          <defs>
            <linearGradient
              id="progressGradient"
              x1="0%"
              y1="0%"
              x2="100%"
              y2="100%"
            >
              <stop offset="0%" stopColor="#22d3ee" />
              <stop offset="33%" stopColor="#3b82f6" />
              <stop offset="66%" stopColor="#8b5cf6" />
              <stop offset="100%" stopColor="#ec4899" />
            </linearGradient>
            <filter id="glow">
              <feGaussianBlur stdDeviation="3" result="coloredBlur" />
              <feMerge>
                <feMergeNode in="coloredBlur" />
                <feMergeNode in="SourceGraphic" />
              </feMerge>
            </filter>
          </defs>

          {/* Background circle */}
          <circle
            cx={size / 2}
            cy={size / 2}
            r={radius}
            stroke="rgba(100, 116, 139, 0.2)"
            strokeWidth={strokeWidth}
            fill="none"
          />

          {/* Progress circle */}
          <motion.circle
            cx={size / 2}
            cy={size / 2}
            r={radius}
            stroke="url(#progressGradient)"
            strokeWidth={strokeWidth}
            fill="none"
            strokeLinecap="round"
            filter="url(#glow)"
            initial={{ strokeDashoffset: circumference }}
            animate={{ strokeDashoffset: offset }}
            transition={{ duration: 2, ease: "easeInOut" }}
            style={{
              strokeDasharray: circumference,
            }}
          />
        </svg>

        {/* Center content */}
        <div className="absolute inset-0 flex items-center justify-center">
          <div className="text-center">
            <motion.div
              className="text-4xl font-bold text-white mb-1"
              initial={{ opacity: 0, scale: 0.5 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ delay: 1, duration: 0.5 }}
            >
              {Math.round(securityScore)}
            </motion.div>
            <div className="text-sm text-gray-400 font-medium">
              Security Score
            </div>
          </div>
        </div>
      </div>
    );
  };

  const VulnerabilityChart = () => {
    const data = [
      {
        label: "Critical",
        value: vulnerabilityStats.critical,
        color: "bg-red-500",
      },
      { label: "High", value: vulnerabilityStats.high, color: "bg-orange-500" },
      {
        label: "Medium",
        value: vulnerabilityStats.medium,
        color: "bg-yellow-500",
      },
      { label: "Low", value: vulnerabilityStats.low, color: "bg-blue-500" },
    ];

    const maxValue = Math.max(...data.map((d) => d.value));

    return (
      <div className="space-y-4">
        {data.map((item, index) => (
          <motion.div
            key={item.label}
            className="flex items-center justify-between"
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: index * 0.1 }}
          >
            <div className="flex items-center gap-3 flex-1">
              <div className={`w-3 h-3 rounded-full ${item.color}`}></div>
              <span className="text-gray-300 text-sm font-medium">
                {item.label}
              </span>
            </div>
            <div className="flex-1 mx-4">
              <div className="h-2 bg-gray-800 rounded-full overflow-hidden">
                <motion.div
                  className={`h-full ${item.color} rounded-full`}
                  initial={{ width: 0 }}
                  animate={{ width: `${(item.value / maxValue) * 100}%` }}
                  transition={{ delay: 0.5 + index * 0.1, duration: 0.8 }}
                />
              </div>
            </div>
            <span className="text-white font-semibold w-8 text-right">
              {item.value}
            </span>
          </motion.div>
        ))}
      </div>
    );
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900/20 to-slate-900">
      {/* Header */}
      <div className="sticky top-0 z-50 backdrop-blur-xl bg-slate-900/80 border-b border-white/10">
        <div className="flex items-center justify-between p-4">
          <div>
            <h1 className="text-2xl font-bold text-white">Security Center</h1>
            <p className="text-sm text-gray-400">
              AI-Powered Vulnerability Management
            </p>
          </div>
          <div className="flex items-center gap-2">
            <Button
              size="sm"
              variant="ghost"
              className="text-gray-400 hover:text-white"
            >
              <Bell className="w-4 h-4" />
            </Button>
            <Button
              size="sm"
              variant="ghost"
              className="text-gray-400 hover:text-white"
            >
              <Settings className="w-4 h-4" />
            </Button>
          </div>
        </div>

        {/* Tab Navigation */}
        <div className="flex border-b border-white/10">
          {[
            { id: "overview", label: "Overview" },
            { id: "assets", label: "Assets" },
            { id: "insights", label: "AI Insights" },
          ].map((tab) => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id as any)}
              className={`px-6 py-3 text-sm font-medium transition-colors relative ${
                activeTab === tab.id
                  ? "text-white"
                  : "text-gray-400 hover:text-white"
              }`}
            >
              {tab.label}
              {activeTab === tab.id && (
                <motion.div
                  className="absolute bottom-0 left-0 right-0 h-0.5 bg-gradient-to-r from-cyan-400 to-purple-500"
                  layoutId="activeTab"
                />
              )}
            </button>
          ))}
        </div>
      </div>

      <div className="p-4 pb-20">
        <AnimatePresence mode="wait">
          {activeTab === "overview" && (
            <motion.div
              key="overview"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              className="space-y-6"
            >
              {/* Security Score Card */}
              <Card className="p-6 bg-slate-900/60 backdrop-blur-xl border-white/10">
                <div className="flex flex-col lg:flex-row items-center gap-8">
                  <div className="flex-shrink-0">
                    <CircularProgress value={securityScore} />
                  </div>
                  <div className="flex-1 text-center lg:text-left">
                    <h3 className="text-xl font-bold text-white mb-2">
                      Overall Security Status
                    </h3>
                    <p className="text-gray-400 mb-4">
                      Your infrastructure security score based on AI analysis
                    </p>
                    <div className="flex flex-wrap gap-2 justify-center lg:justify-start">
                      <Badge className="bg-green-500/20 text-green-400 border-green-500/30">
                        Excellent
                      </Badge>
                      <Badge className="bg-blue-500/20 text-blue-400 border-blue-500/30">
                        AI Monitored
                      </Badge>
                      <Badge className="bg-purple-500/20 text-purple-400 border-purple-500/30">
                        Auto-Remediation
                      </Badge>
                    </div>
                  </div>
                </div>
              </Card>

              {/* Security Metrics Grid */}
              <div className="grid grid-cols-2 lg:grid-cols-4 gap-4">
                {securityMetrics.map((metric, index) => (
                  <motion.div
                    key={metric.label}
                    initial={{ opacity: 0, scale: 0.9 }}
                    animate={{ opacity: 1, scale: 1 }}
                    transition={{ delay: index * 0.1 }}
                  >
                    <Card className="p-4 bg-slate-900/60 backdrop-blur-xl border-white/10 hover:border-white/20 transition-colors">
                      <div className="flex items-center justify-between mb-2">
                        <div
                          className={`p-2 rounded-lg bg-white/5 ${metric.color}`}
                        >
                          {metric.icon}
                        </div>
                        <div
                          className={`text-xs font-medium ${metric.change >= 0 ? "text-green-400" : "text-red-400"}`}
                        >
                          {metric.change >= 0 ? "+" : ""}
                          {metric.change}%
                        </div>
                      </div>
                      <div className="text-2xl font-bold text-white mb-1">
                        {metric.value}
                      </div>
                      <div className="text-xs text-gray-400">
                        {metric.label}
                      </div>
                    </Card>
                  </motion.div>
                ))}
              </div>

              {/* Vulnerability Distribution */}
              <Card className="p-6 bg-slate-900/60 backdrop-blur-xl border-white/10">
                <h3 className="text-lg font-bold text-white mb-4">
                  Vulnerability Distribution
                </h3>
                <VulnerabilityChart />
              </Card>

              {/* Quick Actions */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <Card className="p-6 bg-gradient-to-br from-blue-600/20 to-purple-600/20 backdrop-blur-xl border-white/10">
                  <div className="flex items-center gap-4">
                    <div className="p-3 rounded-full bg-blue-500/20">
                      <Target className="w-6 h-6 text-blue-400" />
                    </div>
                    <div className="flex-1">
                      <h4 className="font-semibold text-white">
                        Start New Scan
                      </h4>
                      <p className="text-sm text-gray-400">
                        AI-powered comprehensive assessment
                      </p>
                    </div>
                    <ChevronRight className="w-5 h-5 text-gray-400" />
                  </div>
                </Card>

                <Card className="p-6 bg-gradient-to-br from-purple-600/20 to-pink-600/20 backdrop-blur-xl border-white/10">
                  <div className="flex items-center gap-4">
                    <div className="p-3 rounded-full bg-purple-500/20">
                      <Zap className="w-6 h-6 text-purple-400" />
                    </div>
                    <div className="flex-1">
                      <h4 className="font-semibold text-white">
                        Auto-Remediation
                      </h4>
                      <p className="text-sm text-gray-400">
                        Deploy AI-suggested fixes
                      </p>
                    </div>
                    <ChevronRight className="w-5 h-5 text-gray-400" />
                  </div>
                </Card>
              </div>
            </motion.div>
          )}

          {activeTab === "assets" && (
            <motion.div
              key="assets"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              className="space-y-4"
            >
              {assets.map((asset, index) => (
                <motion.div
                  key={asset.id}
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: index * 0.1 }}
                >
                  <Card className="p-4 bg-slate-900/60 backdrop-blur-xl border-white/10 hover:border-white/20 transition-colors">
                    <div className="flex items-center gap-4">
                      <div className="p-3 rounded-full bg-white/5">
                        {getAssetIcon(asset.type)}
                      </div>
                      <div className="flex-1">
                        <div className="flex items-center gap-2 mb-1">
                          <h4 className="font-semibold text-white">
                            {asset.name}
                          </h4>
                          <Badge className={getStatusColor(asset.status)}>
                            {asset.status}
                          </Badge>
                        </div>
                        <div className="flex items-center gap-4 text-sm text-gray-400">
                          <span>Risk Score: {asset.riskScore}/100</span>
                          <span>Last Scan: {asset.lastScan}</span>
                        </div>
                      </div>
                      <div className="text-right">
                        <div
                          className={`text-2xl font-bold ${
                            asset.riskScore >= 80
                              ? "text-green-400"
                              : asset.riskScore >= 60
                                ? "text-yellow-400"
                                : "text-red-400"
                          }`}
                        >
                          {asset.riskScore}
                        </div>
                        <div className="text-xs text-gray-400">Score</div>
                      </div>
                    </div>
                  </Card>
                </motion.div>
              ))}
            </motion.div>
          )}

          {activeTab === "insights" && (
            <motion.div
              key="insights"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              className="space-y-6"
            >
              {/* Interactive Vulnerability Network */}
              <Card className="p-6 bg-slate-900/60 backdrop-blur-xl border-white/10 mb-6">
                <div className="flex items-center gap-3 mb-4">
                  <div className="p-2 rounded-full bg-purple-500/20">
                    <Activity className="w-5 h-5 text-purple-400" />
                  </div>
                  <h3 className="text-lg font-bold text-white">
                    Interactive Vulnerability Network
                  </h3>
                </div>
                <VulnerabilityNetwork
                  vulnerabilities={mockVulnerabilities}
                  riskScore={securityScore}
                  className="rounded-lg bg-gradient-to-br from-slate-800/50 to-purple-900/30"
                />
              </Card>

              <Card className="p-6 bg-gradient-to-br from-purple-600/20 to-blue-600/20 backdrop-blur-xl border-white/10">
                <div className="flex items-center gap-3 mb-4">
                  <div className="p-2 rounded-full bg-purple-500/20">
                    <Cpu className="w-5 h-5 text-purple-400" />
                  </div>
                  <h3 className="text-lg font-bold text-white">
                    AI Security Insights
                  </h3>
                </div>
                <div className="space-y-4">
                  <div className="p-4 rounded-lg bg-white/5 border border-white/10">
                    <h4 className="font-semibold text-white mb-2">
                      Critical Recommendation
                    </h4>
                    <p className="text-gray-300 text-sm mb-3">
                      AI detected potential SQL injection vulnerability in user
                      database. Immediate patching recommended.
                    </p>
                    <Button
                      size="sm"
                      className="bg-red-500/20 text-red-400 border-red-500/30 hover:bg-red-500/30"
                    >
                      View Details
                    </Button>
                  </div>

                  <div className="p-4 rounded-lg bg-white/5 border border-white/10">
                    <h4 className="font-semibold text-white mb-2">
                      Security Trend Analysis
                    </h4>
                    <p className="text-gray-300 text-sm mb-3">
                      Overall security posture improved by 15% this month. API
                      security shows strongest improvement.
                    </p>
                    <Button
                      size="sm"
                      className="bg-green-500/20 text-green-400 border-green-500/30 hover:bg-green-500/30"
                    >
                      View Report
                    </Button>
                  </div>

                  <div className="p-4 rounded-lg bg-white/5 border border-white/10">
                    <h4 className="font-semibold text-white mb-2">
                      Automated Remediation
                    </h4>
                    <p className="text-gray-300 text-sm mb-3">
                      12 low-priority vulnerabilities can be automatically fixed
                      with AI-suggested patches.
                    </p>
                    <Button
                      size="sm"
                      className="bg-blue-500/20 text-blue-400 border-blue-500/30 hover:bg-blue-500/30"
                    >
                      Deploy Fixes
                    </Button>
                  </div>
                </div>
              </Card>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </div>
  );
};

export default VulnerabilityDashboard;
